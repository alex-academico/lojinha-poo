package ui;

import model.cliente.Cliente;
import model.cliente.PessoaFisica;
import model.cliente.PessoaJuridica;
import model.nota.ItemNotaLoja;
import model.nota.Nota;
import model.nota.NotaLoja;
import model.produto.*;
import model.produto.ProdutoFisico.LocalArmazenamento;
import model.produto.ProdutoFisico.TamanhoProduto;
import model.produto.ProdutoPerecivel.FormaArmazenamentoPerecivel;

import java.math.BigDecimal;
import java.time.LocalDate;

public class ConsoleMenu {
    private Produto[] produtos;
    private int totalDeProdutos;

    private Cliente[] clientes;
    private int totalDeClientes;

    private Nota[] notasEmitidas;
    private int totalDeNotas;

    public ConsoleMenu() {
        this.produtos = new Produto[100];
        this.totalDeProdutos = 0;

        this.clientes = new Cliente[100];
        this.totalDeClientes = 0;

        this.notasEmitidas = new Nota[100];
        this.totalDeNotas = 0; 
    }

    public void iniciar() {
        while (true) {
            System.out.println("\n    * ---- Menu de Musas ----   * ");
            System.out.println("1. Cadastrar produto");
            System.out.println("2. Alterar produto");
            System.out.println("3. Adicionar estoque ao produto");
            System.out.println("4. Cadastrar cliente");
            System.out.println("5. Alterar cliente");
            System.out.println("6. Criar nota de compra");
            System.out.println("7. Listar notas emitidas");
            System.out.println("8. Listar produtos");
            System.out.println("9. Listar clientes");
            System.out.println("0. Sair");

            String opcao = InputUtils.lerString("Escolha uma opção: ");

            switch (opcao) {
                case "1": cadastrarProduto(); break;
                case "2": alterarProduto(); break;
                case "3": adicionarEstoqueProduto(); break;
                case "4": cadastrarCliente(); break;
                case "5": alterarCliente(); break;
                case "6": criarNota(); break;
                case "7": listarNotasEmitidas(); break;
                case "8": listarProdutos(); break;
                case "9": listarClientes(); break;
                case "0":
                    System.out.println("Hasta la vista ;) <3");
                    return;
                default:
                    System.out.println("Opção invalida");
            }
        }
    }
    
    private void cadastrarProduto() {
        if (totalDeProdutos >= produtos.length) {
            System.out.println("Erro: Limite de produtos atingido.");
            return;
        }

        System.out.println("\n---- Cadastro de Novo Produto ----");
        System.out.println("Qual o tipo de produto?");
        System.out.println("1 - Físico (moveis)");
        System.out.println("2 - Perecível (alimento)");
        System.out.println("3 - Digital (ebook, filme/serie)");
        String tipo = InputUtils.lerString("Escolha o tipo: ").trim();

        String codigo = InputUtils.lerString("Código: ");
        if (buscarProdutoPorCodigo(codigo) != null) {
            System.out.println("Código já registrado.");
            return;
        }

        String nome = InputUtils.lerString("Nome: ");
        BigDecimal preco = InputUtils.lerBigDecimal("Preço: ");
        int estoque = InputUtils.lerInt("Quantidade em estoque inicial: ");

        Produto novoProduto = null;
        try {
            switch (tipo) {
                case "1": // Físico
                    System.out.print("Tamanho (PEQUENO, MEDIO, GRANDE): ");
                    TamanhoProduto tamanho = TamanhoProduto.valueOf(InputUtils.lerString("").toUpperCase().trim());
                    System.out.print("Local de Armazenamento (FABRICA, DEPOSITO, MOSTRUARIO): ");
                    LocalArmazenamento local = LocalArmazenamento.valueOf(InputUtils.lerString("").toUpperCase().trim());
                    novoProduto = new ProdutoFisico(codigo, nome, preco, estoque, tamanho, local);
                    break;
                case "2": // Perecível
                    LocalDate validade = InputUtils.lerData("Data de Validade (dd/MM/yyyy): ");
                    System.out.print("Forma de Armazenamento (PRATELEIRA, REFRIGERADOR, CONGELADOR, FRESCO): ");
                    FormaArmazenamentoPerecivel forma = FormaArmazenamentoPerecivel.valueOf(InputUtils.lerString("").toUpperCase().trim());
                    novoProduto = new ProdutoPerecivel(codigo, nome, preco, estoque, validade, forma);
                    break;
                case "3": // Digital
                    String formato = InputUtils.lerString("Formato (PDF, MP3, etc): ");
                    double tamanhoMB = InputUtils.lerDouble("Tamanho em MB: ");
                    novoProduto = new ProdutoDigital(codigo, nome, preco, estoque, formato, tamanhoMB, false, LocalDate.now());
                    break;
                default:
                    System.out.println("Tipo de produto inválido. Cadastro cancelado.");
                    return;
            }
            produtos[totalDeProdutos++] = novoProduto;
            System.out.println("Produto registrado com sucesso!");
        } catch (IllegalArgumentException e) {
            System.out.println("Erro: Valor inválido para um dos campos (Tamanho, Local, etc). Está escrito certo? Tem o nome como escrever nas opções PF me ajude a te ajudar. Cadastro cancelado.");
        } catch (Exception e) {
            System.out.println("Ocorreu um erro inesperado: " + e.getMessage() + ". Cadastro cancelado.");
        }
    }

    private void listarProdutos() {
        if (totalDeProdutos == 0) {
            System.out.println("Nenhum produto cadastrado");
            return;
        }
        System.out.println("\n---- Lista de Produtos ----");
        for (int i = 0; i < totalDeProdutos; i++) {
            System.out.println(produtos[i].getDetalhes());
        }
    }

    private void listarClientes() {
        if (totalDeClientes == 0) {
            System.out.println("Nenhum cliente cadastrado");
            return;
        }
        System.out.println("\n--- Lista de Clientes ---");
        for (int i = 0; i < totalDeClientes; i++) {
            System.out.println(clientes[i]);
        }
    }

    private void alterarProduto() {
        String codigo = InputUtils.lerString("Código do produto para alterar: ");
        Produto p = buscarProdutoPorCodigo(codigo);
        if (p == null) {
            System.out.println("Produto não encontrado :(");
            return;
        }

        String nome = InputUtils.lerString("Novo nome: ");
        if (!nome.isEmpty()) p.setNome(nome);

        String precoStr = InputUtils.lerString("Novo preço: ");
        if (!precoStr.isEmpty()) {
            try {
                BigDecimal preco = new BigDecimal(precoStr);
                if (preco.compareTo(BigDecimal.ZERO) >= 0) {
                    p.setPrecoBase(preco);
                } else {
                    System.out.println("Preço inválido / Valor não alterado :(");
                }
            } catch (NumberFormatException e) {
                System.out.println("Preço inválido / valor não alterado :(");
            }
        }
        System.out.println("Produto atualizado :)");
    }

    private void adicionarEstoqueProduto() {
        String codigo = InputUtils.lerString("Código do produto: ");
        Produto p = buscarProdutoPorCodigo(codigo);
        if (p == null) {
            System.out.println("Produto não encontrado");
            return;
        }
        int qtd = InputUtils.lerInt("Quantidade a adicionar: ");
        p.adicionarEstoque(qtd);
        System.out.println("Estoque atualizado :)");
    }

    private void cadastrarCliente() {
        if (totalDeClientes >= clientes.length) {
            System.out.println("Limite de clientes atingido");
            return;
        }
        String id = InputUtils.lerString("ID do cliente: ");
        String nome = InputUtils.lerString("Nome: ");
        String endereco = InputUtils.lerString("Endereço: ");
        String telefone = InputUtils.lerString("Telefone: ");
        int tipo = InputUtils.lerInt("Tipo de cliente: 1 - Pessoa Física ou 2 - Pessoa Jurídica ");
        if (tipo == 1) {
            String cpf = InputUtils.lerString("CPF: ");
            clientes[totalDeClientes++] = new PessoaFisica(id, nome, endereco, telefone, cpf);
        } else if (tipo == 2) {
            String cnpj = InputUtils.lerString("CNPJ: ");
            clientes[totalDeClientes++] = new PessoaJuridica(id, nome, endereco, telefone, cnpj);
        } else {
            System.out.println("Tipo inválido / Cadastro cancelado");
            return;
        }
        System.out.println("Cliente registrado com sucesso :)");
    }

    private void alterarCliente() {
        String id = InputUtils.lerString("ID do cliente para alteração: ");
        Cliente c = buscarClientePorId(id);
        if (c == null) {
            System.out.println("Cliente não encontrado :(");
            return;
        }
        String nome = InputUtils.lerString("Novo nome: ");
        if (!nome.isEmpty()) c.setNome(nome);
        String endereco = InputUtils.lerString("Novo endereço: ");
        if (!endereco.isEmpty()) c.setEndereco(endereco);
        String telefone = InputUtils.lerString("Novo telefone: ");
        if (!telefone.isEmpty()) c.setTelefone(telefone);
        System.out.println("Cliente atualizado :)");
    }

    private void criarNota() {
        if (totalDeClientes == 0) {
            System.out.println("Nenhum cliente registrado");
            return;
        }
        if (totalDeProdutos == 0) {
            System.out.println("Nenhum produto registrado");
            return;
        }
        String clienteId = InputUtils.lerString("ID do cliente para nota: ");
        Cliente cliente = buscarClientePorId(clienteId);
        if (cliente == null) {
            System.out.println("Cliente não encontrado :(");
            return;
        }
        NotaLoja novaNota = new NotaLoja(cliente);
        while (true) {
            String codigoProduto = InputUtils.lerString("Código do produto para adicionar: (enter caso queira finalizar a seleção de produtos) ");
            if (codigoProduto.isEmpty()) break;
            Produto produto = buscarProdutoPorCodigo(codigoProduto);
            if (produto == null) {
                System.out.println("Produto não encontrado :(");
                continue;
            }
            int quantidade = InputUtils.lerInt("Quantidade: ");
            if (produto.getEstoque() < quantidade) {
                System.out.println("Estoque insuficiente --> Estoque atual: " + produto.getEstoque());
                continue;
            }
            produto.removerEstoque(quantidade);
            novaNota.adicionarItem(new ItemNotaLoja(produto, quantidade));
            System.out.println("Item adicionado");
        }
        if (novaNota.getItens().length == 0) {
            System.out.println("Nenhum item adicionado à nota / Nota cancelada ");
            return;
        }
        if (totalDeNotas == notasEmitidas.length) {
            Nota[] novasNotas = new Nota[notasEmitidas.length + 10];
            System.arraycopy(notasEmitidas, 0, novasNotas, 0, totalDeNotas);
            notasEmitidas = novasNotas;
        }
        notasEmitidas[totalDeNotas++] = novaNota;
        novaNota.exibirResumo();
    }

    private void listarNotasEmitidas() {
        if (totalDeNotas == 0) {
            System.out.println("Nenhuma nota emitida");
            return;
        }
        for (int i = 0; i < totalDeNotas; i++) {
            notasEmitidas[i].exibirResumo();
        }
    }

    private Produto buscarProdutoPorCodigo(String codigo) {
        for (int i = 0; i < totalDeProdutos; i++) {
            if (produtos[i].getCodigo().equals(codigo)) return produtos[i];
        }
        return null;
    }

    private Cliente buscarClientePorId(String id) {
        for (int i = 0; i < totalDeClientes; i++) {
            if (clientes[i].getId().equals(id)) return clientes[i];
        }
        return null;
    }
}
